Orientação a Objetos: Introdução
================================

Todos nós temos a noção de Classe, só que em um contexto estático (sem objetos).

Contexto estático: fluxo dos dados.
variavel = upper(last(split("frase qualquer"))) == "QUALQUER"

Os dados residem fora dos métodos.

Trabalhar em contexto estático é um modelo de programação.

Paradigma de programação: imperativo e procedimental

Imperativo: por que temos que dar todas as ordens ao computador. Em contraste ao declarativo: declara-se os fatos e o computador resolve perguntas.

Procedimental: funciona com a criação de sub-rotinas (métodos/funções).

Outros paradigmas de programação: programação orientada a eventos, programação funcional, ..., programação orientada a objetos (POO, OOP Object Oriented Programming).

Orientação a Objetos? Pensar que todo código modela um objeto.

A ideia de OO vem de pelo menos quase 30 anos atrás. Busca de um meio diferente de construir programas. Um meio mais modular. Aproximar a programação de uma engenharia. Engenharia de um programa? Ideia de código portável, independente, até então era mais engessado.

Alan Akay

Um dos primeiros pensadores e idealizadores de OO. É um dos pais da interface visual (gráfica). É um campo de pesquisa conhecido como Interação Humano-Computador (HCI Human-Computer Interaction).

Um poderosa ideia sobre ideias
http://www.ted.com/talks/alan_kay_shares_a_powerful_idea_about_ideas

Liderou o projeto de uma nova linguagem de programação chamada Smalltalk. Foram introduzidos os conceitos de Orientação a Objetos. Existem vários conceitos de OO, várias funcionalidades de OO, mas as linguagens nem sempre implementam tudo. Java, por exemplo, nem tudo é Orientado a Objetos (ex.: int, double, boolean, char, são escalares, não são objetos).

Comercialmente, OO ficou conhecida com as linguagens: C++, C#, Java, Ruby, Python, Perl, ....

Alan Kay pensou OO como células em um organismo vivo. Por que não criar código como células em um organismo e trocam mensagens. O problema é controlar a complexidade! Sistemas complexos. Fazer um sistema complexo aparentar simplicidade.

Complexidade como um sistema de muitas variáveis com muitos detalhes. Uma forma de controlar a complexidade é abstrair.

Abstração: remover os detalhes irrelevantes para tornar viável. Objetos modelam problemas com um nível satisfatório de precisão.

Objetos podem ser vistos de várias formas, uma delas é que eles tem características ou propriedades ou atributos.

Objetos maiores são construídos sobre objetos menores e assim por diante. Cada objeto particular tem suas próprias características. Ex.: resolução da tela do telefone.
