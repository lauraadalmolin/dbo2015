 package project_euler;

 public class Problem { 

    /*
    P2

    Each new term in the Fibonacci sequence is generated by adding the previous two terms.
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms. */

    public static long sum_even (long sum, long new_one) {
        sum += new_one; 
        return sum; }
        
    public static long p2 () {
        long sum = 0, scnd = 1, frst = 1, curr = 0;
        for (; curr < 4000000;) {
            curr = scnd + frst;
            frst = scnd;
            scnd = curr;
            if (curr % 2 == 0) {
                sum = sum_even(sum, curr);
                } 
        }
            return sum;
    }
    
    /*
    P3

    The prime factors of 13195 are 5, 7, 13 and 29.
    What is the largest prime factor of the number 600851475143 ?
    */

     public static int p3 (long n) {
            int i;
            for (i = 2; i <= n; i++) {
                if (n % i == 0) {
                   	n /= i;
                    i--;
                }
            }
     
            return i;
        }

    /* 
    P4

    A palindromic number reads the same both ways.
    The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

    Find the largest palindrome made from the product of two 3-digit numbers.

    */


    public static boolean isPalindromic (int n) {
        char[] a = Strings.fromInt(n);
        int j = a.length - 1;
        for (int i = 0; i < a.length/2; i++) {
            if (a[i] != a[j]) return false; 
            j--;
        }
        return true;
    }

    public static int p4 () {
        int i = 100, j = 100, max = 0;
        for (; i < 999; i++) {
            for (j = 100; j < 999; j++) {
                if (isPalindromic (i*j)) {
                max = (i*j > max) ? i*j : max;
                }
            }
        }
        return max;
    }
    
    /*
    P5

    2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

	What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20? */

    public static int p5 () {
    	int b, i, a = 2520;
    	boolean tr = false;
    	while (!tr) {
    		a+=2520;
    		boolean div = true;
    		for (b = 1; b <= 20 && div; b++) {
    			if (a % b != 0) div = false;
    		}
    		if (div) tr = true;
    	}
 	   return a;
    }

    /*
    P6

    The sum of the squares of the first ten natural numbers is,
    A soma dos quadrados:
    1^2 + 2^2 + ... + 10^2 = 385
    The square of the sum of the first ten natural numbers is,
    O quadrado da soma:
    (1 + 2 + ... + 10)^2 = 55^2 = 3025
    Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

    Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
    */

    public static int p6 () {
        int somaquadrados = 0, quadradosoma = 0; 
        for (int i = 1; i <= 100; i++) {
            quadradosoma += i;
        }
        quadradosoma = quadradosoma * quadradosoma;
        for (int i = 1; i <= 100; i++) {
            somaquadrados += i * i;
        }
        int r = quadradosoma - somaquadrados;
        return r;
    }

    /*
    P7

    By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

    What is the 10 001st prime number? */

    public static int p7 () {
        int n = 1, i;
        boolean prime;
        for (i = 3; n < 10001; i+=2) {
            prime = true;
            for (int j = 2; j < i/2; j++) {
                if (i % j == 0) prime = false;
            }
            if (prime) n++;
        }
        i-=2;
        return i;
    }

    /*
    P8

    The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

            73167176531330624919225119674426574742355349194934
            96983520312774506326239578318016984801869478851843
            85861560789112949495459501737958331952853208805511
            12540698747158523863050715693290963295227443043557
            66896648950445244523161731856403098711121722383113
            62229893423380308135336276614282806444486645238749
            30358907296290491560440772390713810515859307960866
            70172427121883998797908792274921901699720888093776
            65727333001053367881220235421809751254540594752243
            52584907711670556013604839586446706324415722155397
            53697817977846174064955149290862569321978468622482
            83972241375657056057490261407972968652414535100474
            82166370484403199890008895243450658541227588666881
            16427171479924442928230863465674813919123162824586
            17866458359124566529476545682848912883142607690042
            24219022671055626321111109370544217506941658960408
            07198403850962455444362981230987879927244284909188
            84580156166097919133875499200524063689912560717606
            05886116467109405077541002256983155200055935729725
            71636269561882670428252483600823257530420752963450
   
    Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. 
    What is the value of this product?
    */
    
    public static long p8 () {
        String s = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
        char[] n = s.toCharArray();
        long max = 0;
        long mult = 1;
        for (int i = 0; i < n.length - 13; i++) {
            mult = 1;
            for (int j = 0; j < 13; j++) {
                int aux = n[i+j] - 48;
                mult = mult * aux;
            }
            if (mult > max) max = mult;
        }
        return max;
    }

    /* 
    P9

    A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

    a2 + b2 = c2
    For example, 32 + 42 = 9 + 16 = 25 = 52.

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.

    */

    // Parti da ideia da Fórmula de Euclides
    // a = m^2 - n^2
    // b = 2mn
    // c = m^2 + n^2
    // m e n devem ser primos entre si, isto é, o único divisor comum entre eles deve se 1
    // m - n = 1 


    public static int p9 () {
        int a, b, c;
        for (int n = 1; n < 500; n++) {
            for (int m = n + 1; m < 500; m++) {
                a = (m * m) - (n * n);
                b = 2 * m * n;
                c = (m * m) + (n * n);
                if (a + b + c == 1000) return (a*b*c);
            }   
        }  
        return -1; 
    }
    
    /*
    P10

    The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

    Find the sum of all the primes below two million.
    */

    public static long p10 (){
        long n = 2;
        int i;
        boolean prime;
        for (i = 3; i < 2000000; i+=2) {
            prime = true;
            // Só usei Math.sqrt(i) porque o senhor sugeriu.
            // Poderia ser i/2, mas demoraria bem mais para rodar.
            for (int j = 2; j <= Math.sqrt(i); j++) {
                if (i % j == 0) { prime = false; break; }
            }
            if (prime) n = n + i;
            
        }
        return n;
    }

    /* 

    P12

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors? */


    public static long p12 () {
        int i, div_n = 0, j;
        long n = 0;
        for (i = 1; div_n < 500; i++) {
            n = 0;
            div_n = 0;
            j = 0;
            while (j < i) {
                j = j + 1;
                n = j + n;
            }
            for (int k = 1; k <= n; k++) {
                if (n % k == 0) div_n++;
            }
                
        }
        
        return n;
   }
    
}